這我用了，但是這不是我要的，
我要的是使用findContours 找到兩個輪廓，但這兩個輪廓有幾個邊是同樣的，
而只要一個輪廓保留相同的邊，另一個移除相同的邊，這樣我的得到的路徑才不會重複


如果您想要在保留其中一个轮廓的同时删除两个轮廓中共有的边，可以使用cv2.subtract函数。具体地，您可以先找到两个轮廓，然后使用cv2.drawContours函数将它们分别绘制在两个不同的掩模图像上，接着使用cv2.subtract函数将这两个掩模图像相减，最后使用cv2.findContours函数找到差分后的轮廓。

以下是一个示例代码，假设我们已经找到了两个轮廓contour1和contour2：

python
Copy code
import cv2

# 创建两个掩模图像，将两个轮廓分别绘制在上面
mask1 = np.zeros_like(img)
mask2 = np.zeros_like(img)
cv2.drawContours(mask1, [contour1], -1, (255, 255, 255), -1)
cv2.drawContours(mask2, [contour2], -1, (255, 255, 255), -1)

# 使用掩模图像相减，得到轮廓之间的差异
diff = cv2.subtract(mask1, mask2)

# 查找差异轮廓
contours, _ = cv2.findContours(diff, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
在这个示例中，我们首先创建两个掩模图像mask1和mask2，并使用cv2.drawContours函数将轮廓contour1和contour2分别绘制在上面。接着，我们使用cv2.subtract函数将mask1和mask2相减，得到轮廓之间的差异。最后，我们使用cv2.findContours函数查找差异轮廓。

请注意，由于我们使用的是掩模图像而不是原始图像，因此返回的轮廓将仅包含与掩模图像的白色区域相对应的部分，而不是原始图像中的像素。因此，在绘制轮廓之前，您可能需要使用cv2.fillPoly函数将掩模图像中的白色区域填充为原始图像中的实际颜色。




陳建至
可以有一個完整示範嗎
好的，以下是一个完整的示例代码，它可以找到两个轮廓中不同的部分，并将它们分别绘制成两个不同的颜色：

python
Copy code
import cv2
import numpy as np

# 读入图像并将其转换为灰度图像
img = cv2.imread('image.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# 使用 Canny 边缘检测算法查找图像边缘
edges = cv2.Canny(gray, 50, 150)

# 使用 findContours 函数查找轮廓
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# 创建两个掩模图像
mask1 = np.zeros_like(img)
mask2 = np.zeros_like(img)

# 将两个轮廓分别绘制在掩模图像上
cv2.drawContours(mask1, [contours[0]], -1, (255, 255, 255), -1)
cv2.drawContours(mask2, [contours[1]], -1, (255, 255, 255), -1)

# 使用掩模图像相减，得到轮廓之间的差异
diff = cv2.subtract(mask1, mask2)

# 查找差异轮廓
contours_diff, _ = cv2.findContours(diff, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# 将两个轮廓分别绘制成不同的颜色
cv2.drawContours(img, contours[0], -1, (0, 0, 255), 2)
cv2.drawContours(img, contours[1], -1, (0, 255, 0), 2)
cv2.drawContours(img, contours_diff[0], -1, (255, 0, 0), 2)

# 显示结果
cv2.imshow('image', img)
cv2.waitKey(0)
cv2.destroyAllWindows()
在这个示例中，我们首先读入一张图像，并将其转换为灰度图像。接着，我们使用 Canny 边缘检测算法查找图像边缘，然后使用cv2.findContours函数查找轮廓。我们假设找到了两个轮廓，分别存储在列表contours中的第一个和第二个元素中。

接下来，我们创建了两个掩模图像mask1和mask2，并使用cv2.drawContours函数将两个轮廓分别绘制在上面。接着，我们使用cv2.subtract函数将mask1和mask2相减，得到轮廓之间的差异。最后，我们使用cv2.findContours函数查找差异轮廓，并使用cv2.drawContours函数将两个轮廓和差异轮廓分别绘制成不同的颜色。

请注意，由于我们使用的是掩模图像而不是原始图像，因此返回的轮廓将仅包含与



